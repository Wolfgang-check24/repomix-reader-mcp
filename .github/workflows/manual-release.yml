name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0, 1.1.0-beta.1)'
        required: true
        type: string
      npm_tag:
        description: 'NPM dist-tag (latest, beta, alpha, next)'
        required: true
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - alpha
          - next
      create_github_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean
      dry_run:
        description: 'Dry run (test without publishing)'
        required: true
        default: false
        type: boolean

jobs:
  manual-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$'; then
            echo "‚ùå Invalid version format: ${{ inputs.version }}"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "‚úÖ Version format is valid"
          
      - name: Run security checks
        run: npm run security:check
        
      - name: Build project
        run: npm run build
        
      - name: Update package.json version
        run: npm version ${{ inputs.version }} --no-git-tag-version
        
      - name: Show package contents (dry run)
        run: |
          echo "üì¶ Package contents that would be published:"
          npm pack --dry-run
          
      - name: Publish to NPM (dry run)
        if: inputs.dry_run == true
        run: |
          echo "üß™ DRY RUN: Would publish with the following command:"
          echo "npm publish --tag ${{ inputs.npm_tag }} --provenance --access public"
          echo "üìã Current package.json version:"
          grep '"version"' package.json
          
      - name: Publish to NPM
        if: inputs.dry_run == false
        run: npm publish --tag ${{ inputs.npm_tag }} --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create and push git tag
        if: inputs.dry_run == false
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"
          git push origin "v${{ inputs.version }}"
          
      - name: Generate changelog
        if: inputs.create_github_release == true && inputs.dry_run == false
        id: changelog
        run: |
          # Generate a simple changelog from recent commits
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" --since="$(git log --tags --simplify-by-decoration --pretty='format:%ai' | head -2 | tail -1)" --no-merges >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        if: inputs.create_github_release == true && inputs.dry_run == false
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.version }}
          name: Release v${{ inputs.version }}
          body: |
            ## Release v${{ inputs.version }}
            
            Published to NPM with tag: `${{ inputs.npm_tag }}`
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### üîí Security Status
            - ‚úÖ All security checks passed
            - ‚úÖ No vulnerabilities in dependencies
            - ‚úÖ No sensitive information detected
            
            ### üì¶ Installation
            ```bash
            # Install latest
            npm install repomix-reader-mcp@${{ inputs.npm_tag }}
            
            # Install specific version
            npm install repomix-reader-mcp@${{ inputs.version }}
            ```
            
            ### üîó Links
            - [NPM Package](https://www.npmjs.com/package/repomix-reader-mcp/v/${{ inputs.version }})
            - [Documentation](./README.md)
          draft: false
          prerelease: ${{ contains(inputs.version, '-') }}
          
      - name: Summary
        run: |
          echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Tag:** ${{ inputs.npm_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** ${{ inputs.create_github_release }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.dry_run }}" = "false" ]; then
            echo "- **Status:** ‚úÖ Published successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **NPM URL:** https://www.npmjs.com/package/repomix-reader-mcp/v/${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** üß™ Dry run completed" >> $GITHUB_STEP_SUMMARY
          fi
